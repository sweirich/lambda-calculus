embed {{ coq-preamble
Require Export Metalib.LibLNgen. 
}}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% METAVARIABLES

metavar tmvar, x, y, z ::=
  {{ repr-locally-nameless }}      
  {{ com variables }}
  {{ lex alphanum }}

metavar const , a  ::= 
  {{ coq nat }}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% GRAMMAR

grammar

tm, t , u :: '' ::= {{ com terms }}

  | a                  ::    :: ext

  | let x = t in u     ::    :: let_ 
    (+ bind x in u +)
    {{ com let }} 

  | x                  ::    :: var 
    {{ com variables }}

  | \ x . t            ::    :: abs 
    (+ bind x in t +)
    {{ tex \lambda [[x]] . [[t]] }}
    {{ com abstractions }}

  | t u                ::   :: app 
    {{ tex [[t]] \; [[u]] }}
    {{ com function application }}
    
  | ( t )              :: M :: paren 
    {{ coq ([[t]])}}

  | t [ x ~> u ]        :: S :: subst
     {{ coq (open_tm_wrt_tm[[x t]][[u]])}}

substitutions
  single t x     :: subst

freevars
  t x   :: fv

%%  values  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

grammar

v :: 'v_' ::= {{ com values (call-by-value) }}

  | \ x . t            ::    :: abs 
    (+ bind x in t +)
    {{ tex \lambda [[x]] . [[t]] }}
    {{ com function }}

relation , R :: 'R_' ::= {{ com relation }} {{ coq tm -> tm -> Prop }} {{ coq-universe Type }}
  | beta               :: M :: beta {{ coq beta }}
  | eta                :: M :: eta {{ coq eta }}
  | betaeta            :: M :: betaeta {{ coq betaeta }}

subrules 
  v <:: t

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%  Terminals  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

grammar

terminals :: 'terminals_' ::=
  | <->               ::   :: iso           {{ tex \leftrightarrow }}
  | <=>               ::   :: lrarrow       {{ tex \Leftrightarrow }}
  | ==                ::   :: definitional  {{ tex \equiv }}
  | =beta             ::   :: betaeq        {{ tex =_{\beta} }}
  | ~                 ::   :: twiddle       {{ tex \sim }}
  | ~~                ::   :: compatible    {{ tex \asymp }}
  | /=                ::   :: neq           {{ tex \neq }}
  | ≡                 ::   :: equiv         {{ tex \equiv }}

  | ->                ::   :: arrow         {{ tex \to }}
  | ->>               ::   :: double_arrow  {{ tex \to\!\!\!\!\to }}
  | ~>                ::   :: step          {{ tex \leadsto }}
  | -->               ::   :: produce       {{ tex \longrightarrow }}
  | <=                ::   :: check         {{ tex \leq }}
  | =>                ::   :: infer         {{ tex \Rightarrow }}
  | ==>               ::   :: parred        {{ tex \Longrightarrow }}
  | ~>>               ::   :: stepv         {{ tex \leadsto_{v} }}
  | |->               ::   :: mapsto        {{ tex \mapsto }}
  | <-|               ::   :: mapsfrom      {{ tex \mapsfrom }}
  | :=                ::   :: assign        {{ tex \mathop{:=} }}
  | ⇓                 ::   :: down          {{ tex \Downarrow }}


  | ->+               ::   :: plusarrow     {{ tex \to^{+} }}
  | ->*               ::   :: multiarrow    {{ tex \to^{\ast} }}
  | ~>*               ::   :: multistep     {{ tex \leadsto^{\ast} }}
  | =>*               ::   :: minfer        {{ tex \Rightarrow^{\ast} }}
  | ->=               ::   :: reflarrow     {{ tex \to^{=} }}

  | notin             ::   :: notin      {{ tex \not\in }}
  | fv                ::   :: fv         {{ tex \mathsf{fv}\! }}
  | dom               ::   :: dom        {{ tex \mathsf{dom} }}

  | all               ::   :: forall     {{ tex \forall }}
  | exists            ::   :: exists     {{ tex \exists }}
  | /\                ::   :: meet       {{ tex \wedge }}
  | \/                ::   :: join       {{ tex \vee }}
  | implies           ::   :: implies    {{ tex \ottkw{implies} }}

  | in                ::   :: in         {{ tex \ottkw{in} }}
  | let               ::   :: let        {{ tex \ottkw{let} }}
  | case              ::   :: case       {{ tex \ottkw{case} }}
  | fst               ::   :: fst        {{ tex \ottkw{fst} }}
  | snd               ::   :: snd        {{ tex \ottkw{snd} }}
  | inj               ::   :: inj        {{ tex \ottkw{inj} }}
  | ;                 ::   :: semi       {{ tex \mathsf{;} }}

  | Pi                ::   :: Pi         {{ tex \Pi }}
  | Sigma             ::   :: Sigma      {{ tex \Sigma }}

  | |-                ::   :: entails    {{ tex \vdash }}
  | -|                ::   :: produces   {{ tex \dashv }}
  | |=                ::   :: proves     {{ tex \vDash }}

  | |>                ::   :: cast       {{ tex \triangleright }}
  | ok                ::   :: ok         {{ tex \ \mathsf{ok} }}
  | _                 ::   :: blank      {{ tex \_ }}
  | empty             ::   :: empty      {{ tex \varnothing }}
  | hole              ::   :: hole       {{ tex \circ }}
  | '|'               ::   :: bar        {{ tex | }}
  | o                 ::   :: bullet     {{ tex \bullet }}
  | ++                ::   :: concat     {{ tex \mathop{++} }}
  | *                 ::   :: times      {{ tex \cdot }}
  | []                ::   :: box        {{ tex \Box }}

  | beta               ::  :: beta       {{ tex \beta }}
  | eta                ::  :: eta        {{ tex \eta }}
  | betaeta            ::  :: betaeta    {{ tex \beta\eta }}


formula :: 'formula_' ::=
  | judgement                ::   :: judgement

  | x in fv t               ::   :: used
    {{ coq [[x]] `in` fv_tm [[t]] }}
    {{ tex [[x]]\ [[in]]\ [[fv]]\ [[t]] }}

  | x notin fv t             ::   :: fresh
    {{ coq [[x]] `notin` fv_tm [[t]] }}

  | nolc t                   :: M :: nolcA
    {{ tex }}
    {{ coq True }}

  | t = u                    ::   :: equal
    {{ coq [[t]]=[[u]] }}

  | R t u                    ::   :: rel
    {{ coq [[R]][[t]][[u]]  }} 

  | True                     :: M  :: True
    {{ coq True }}
  | False                    :: M  :: False
    {{ coq False }}
  | not formula              :: M  :: not
    {{ coq not ([[formula]]) }}
    {{ tex \neg [[formula]] }}
  | formula1 /\ formula2     :: M  :: and
    {{ coq [[formula1]] /\ [[formula2]] }}
  | formula1 \/ formula2     :: M  :: or
    {{ coq [[formula1]] \/ [[formula2]] }}
  | formula1 implies formula2     :: M  :: implies
    {{ coq [[formula1]] -> [[formula2]] }}
    {{ tex [[formula1]]\ [[implies]]\ [[formula2]] }}
  | formula1 iff formula2     :: M  :: iff
    {{ coq [[formula1]] <-> [[formula2]] }}
  | all t , formula           :: M  :: allt
    {{ coq (forall [[t]], [[formula]]) }}
    {{ tex \forall [[t]], [[formula]] }}  

  | exists t , formula           :: M  :: ext
    {{ coq (exists [[t]], [[formula]]) }}
    {{ tex \exists [[t]], [[formula]] }}  

  | ( formula )              ::   :: Paren
    {{ coq ([[formula]]) }}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Rules

defns 
JBeta :: '' ::=

defn
t beta u ::    :: beta :: 'beta_'
{{ com Definition 3.1.3 }}
{{ tex [[t]]\ \beta\mbox{-reduces to}\ [[u]] }}
by

------------------------------ :: reduct
(\ x . t) u  beta t [ x ~> u ] 

defns 
JEta :: '' ::=

defn
t eta u ::    :: eta :: 'eta_'
{{ com Definition 3.1.1 (i) }}
{{ tex [[t]]\ \eta\mbox{-reduces to}\ [[u]] }}
by

% We write it in this way so that Ott produces 
% the appropriate output
% x notin fv t
t' = t x 
------------------------------ :: reduct
\x . t' eta  t 


defns 
JBetaEta :: '' ::=

defn
t betaeta u ::    :: betaeta :: 'eta_'
{{ com Either $\beta$ or $\eta$ reduction (Definition 3.1.1 (ii)) }}
{{ tex [[t]]\ \beta\eta\mbox{-reduces to}\ [[u]] }}
by

t beta u
------------------------------ :: beta
t betaeta u

t eta u
------------------------------ :: eta
t betaeta u



defns 
JGen :: '' ::=

defn 
R |- t -> u ::    :: compatible_closure :: 'cc_' 
{{ com Compatible closure of $[[R]]$ (aka one-step reduction (3.1.5) }}
{{ tex [[t]][[->]]_{[[R]]} [[u]] }}
by

R t u 
-------- :: rel
R |- t -> u 

R |- t -> u 
----------------- :: abs
R |- \x.t -> \x.u 

R |- t -> t'
-------------- :: app1
R |- t u -> t' u

R |- u -> u'
----------------- :: app2
R |- t u -> t u'


defns
JRC :: '' ::=

defn
R |- t ->= u ::   :: refl_closure :: 'r_'

{{ com reflexive closure of $[[R]]$ (3.1.4) }}
{{ tex [[t]][[->=]]_{R} [[u]] }}
by

R t u 
----------- :: rel
R |- t ->= u 

------------- :: refl
R |- t ->= t


defns
JTC :: '' ::=

defn 
R |- t ->+ u ::    :: trans_closure :: 't_' 
{{ com transitive closure of $[[R]]$ (3.1.4) }}
{{ tex [[t]][[->+]]_{R} [[u]] }}
by

R t u 
----------- :: rel
R |- t ->+ u 


R |- t1 ->+ t2
R |- t2 ->+ t3 
-------------- :: trans
R |- t1 ->+ t3

defns
JRTC :: '' ::=

defn 
R |- t ->* u ::    :: refl_trans_closure :: 'rt_' 
{{ com reflexive-transitive closure of $[[R]]$ }}
{{ tex [[t]][[->*]]_{R} [[u]] }}
by

R t u 
----------- :: rel
R |- t ->* u 


----------- :: refl
R |- t ->* t


R |- t1 ->* t2
R |- t2 ->* t3 
-------------- :: trans
R |- t1 ->* t3

defns
JSTC :: '' ::= 

defn 
R |- t <-> u ::      :: sym_trans_closure :: 'st_' 
{{ com symmetric-transitive closure of $[[R]]$ }}
{{ tex [[t]][[<->]]_{R} [[u]] }}
by

R t u
------------ :: rel
R |- t <-> u

R |- u <-> t
-------- :: sym 
R |- t <-> u

R |- t1 <-> t2 
R |- t2 <-> t3
----------- :: trans
R |- t1 <-> t3


defns
JPar :: '' ::= 

defn 
t ==> u ::    :: parallel :: 'p_' 
{{ com Parallel reduction (3.2.3) }}
{{ tex [[t]] [[==>]]_\beta [[u]] }}
by

t ==> \ x. t'
u ==> u'
---------------------------- :: beta
t u ==> t' [ x ~> u' ]

------- :: var
x ==> x

t ==> t'
---------------------- :: abs
\x . t ==> \x . t'

t ==> t'
u ==> u'
---------------------------- :: app
t u ==> t' u'



defns
JOp :: '' ::=  

defn
t ~> t' ::     :: Step :: 'S_' {{ com Small-step evaluation }} 
by

t ~> t'
------------------------------ :: app
t u ~> t' t 

------------------------------ :: beta
(\ x . t) u ~>  t [ x ~> u ] 



defns
JOpV :: '' ::=  

defn
t ~>> t' ::     :: StepV :: 'SV_' {{ com small-step evaluation, CBV }} 
by

t ~>> t'
------------------------------ :: app1
t u ~>> t' t 

u ~>> u'
------------------------------ :: app2
v u ~>> v u'

------------------------------ :: betav
(\ x . t) v ~>>  t [ x ~> v ] 



defns
JEval :: '' ::= 
defn
t ⇓ v ::     :: Eval :: 'E_' {{ com big-step evaluation (CBN) }} 
by

t ⇓ \x.t'
t' [ x ~> u ] ⇓ v
------------------------------ :: beta
t u ⇓ v

defns
JEq :: '' ::= 

defn 
t ≡ u ::      :: conversion :: 'eq_' 
{{ com $\beta$-conversion or $\beta$-equality (Definition 2.1.4) }}
{{ tex [[t]][[≡]]_{\beta}[[u]] }}
by

------------------------------ :: beta
(\ x . t) u ≡ t [ x ~> u ] 

--------- :: refl
t ≡ t

u ≡ t
-------- :: sym 
t ≡ u

t1 ≡ t2 
t2 ≡ t3
----------- :: trans
t1 ≡ t3

t ≡ t' 
------------- :: app1
t u ≡ t' u

u ≡ u'
------------- :: app2
t u ≡ t u'


t ≡ t'
-------------- :: abs
\x.t ≡ \x.t'

defns

JRed :: '' ::=

defn 
t --> u ::    :: full_reduction :: 'F_' 
{{ com Full $\beta$-reduction }}
{{ tex [[t]][[-->]]_{\beta} [[u]] }}
by

-------------------------- :: beta
(\x.t) u --> t [ x ~> u ]

t --> t'
---------------------- :: abs
\x . t --> \x . t'


t --> t'
---------------------------- :: app1
t u --> t' u

u --> u
---------------------------- :: app2
t u --> t u'



defns
Jredex :: '' ::=

defn 
  redex R t ::  :: redex :: 'redex_'
by
        
R t u
------------------- :: def
redex R t


defns
Jterminal :: '' ::=

defn 
  terminal R t ::  :: terminal :: 'terminal_'
by
        
all u, not R t u
------------------- :: def
terminal R t


defns
JNF :: '' ::=
defn
  nf R t ::     :: nf  :: 'nf_'
{{ com A term is a $[[R]]$-normal forma (R-nf) if it does not contain (as subterm) any R-redex }}
{{ tex [[R]]-\mathit{nf}\ [[t]] }}
by

not redex R x
-------------- :: var
nf R x


nf R t 
not redex R (\x.t)
------------------ :: abs
nf R (\x.t)


nf R t
nf R u
not redex R (t u)
----------------- :: app
nf R (t u)

