\documentclass{article}

\usepackage{amsmath,amssymb,amsthm}
\usepackage{ottalt}
\usepackage{mathpartir}
\usepackage{supertabular}
\usepackage{url}
\usepackage[utf8x]{inputenc}
\usepackage{newunicodechar}
\usepackage{mathrsfs}

\usepackage{listings}

\usepackage{fancyvrb}
\usepackage[usenames,dvipsnames,svgnames,x11names]{xcolor}
%\usepackage{color}

\theoremstyle{definition}
\newtheorem{definition}{Definition}[section]
\newtheorem{lemma}{Lemma}[section]

\inputott{lc-rules}

\title{Graph Model for the untyped lambda calculus and for 
Verse}

% lstlistings options
\usepackage{lstcoq}
\usepackage{lstparams}

% this pulls a listing from a Coq file.
\newcommand{\codeplus}[3]{%
  \lstinputlisting[%
        #3,
        linerange={#2},
        rangebeginprefix=(*\ begin\ ,%
        rangebeginsuffix=\ *),%
        rangeendprefix=(*\ end\ ,%
        rangeendsuffix=\ *),
        includerangemarker=false]{#1}}
\newcommand{\code}[2]{\codeplus{#1}{#2}{}}

% \DeclareUnicodeCharacter{2208}{\in}

\begin{document}
\maketitle


\section{Part one: Graph Model for the untyped lambda calculus}

This document describes a denotational semantics for a
call-by-value untyped lambda calculus based on 
a ``graph'' model. 

The file \texttt{simple/model.v} contains a sketch of this semantics for the untyped lambda calculus. 

\[ e ::= x\ |\ [[\x.e]]\ | [[e1 e2]] \]

This semantics interprets lambda calculus terms as a graph: a set of
input-output pairs, each pair written $w \mapsto v$, where $w$ and $v$
are elements of some domain $\mathcal{W}$.


Here are some examples of graphs.

\begin{itemize}
\item The graph of the identity function looks like this:

\[ \{ w \mapsto w\ |\ w \in \mathcal{W} \} \cup \{ \circ \} \]

This graph maps all inputs $w$ to $w$. 

\item If we have a nonterminating expression, like $\omega$, i.e. 
  $[[ (\x. x x) (\x. x x) ]]$, then its denotation is the emptyset.  It is not
  a value and we cannot apply it to any arguments to get a results.

\item The denotation of a function that takes an argument and then diverges
  i.e. $\lambda x. \omega$ is 

  \[ \{ \circ \} \]

  The trivial term, $\circ$, marks that this is a value, but there are still
  no mappings in the graph. This term lets us distinguish the denotation of a
  diverging expression from that of a value, even if we cannot use the value.

\item The denotation of $K$, or $[[\x.\y.x]]$, is 

  \[ \{ w_1 \mapsto (w_2 \mapsto w_1)\ |\ w_1, w_2 \in \mathcal{W} \} \]

\noindent
or maybe it should be:

  \[ \{ w_1 \mapsto \{ w_2 \mapsto w_1\ |\ w_2 \in \mathcal{W} \}\ |\ w_1 \in \mathcal{W} \} \]

\noindent
  or maybe these two definitions act the same, extensionally. Given any two
  arguments $w_1$ and $w_2$, we will get $w_1$ back.

We can collapse inner sets into single values. 

\end{itemize}


What is this domain $\mathcal{W}$? Informally, we would like it 
to be the powerset of all mappings: 

\[ \mathcal{W} = \mathscr{P}( w_1 \mapsto w_2 )\ \mathit{for}\ w_1\ \mathit{and}\ w_2 \in \mathcal{W}  \] 

\noindent
(plus a trivial term $\circ$ that we can use as the semantics for a function
that terminates, but cannot be applied).

But that is not a well founded definition. 

And how do we represent this set in a proof assistant?


We can represent the powerset of some type by its characteristic function,
i.e. a proposition that tells us whether the value is in the set.

\begin{lstlisting}{language=Coq}
Definition P (A : Type) := A -> Prop.
\end{lstlisting}

However, this definition does not give us an \emph{inductive} or finite
representation of values. For that we need to consider only finite sets of
values. (We'll use the type constructor \texttt{fset A} to refer to a finite
set containing elements of type \texttt{A}). This type can be inductively
defined and trivially coerced to the non-inductive variant \texttt{P A}. Using
this finite set type, we can build up our representation out of an inductive
representation of the graph:

\codeplus{../coq/simple/model.v}{Value}{language=Coq}

And then map lambda calculus expressions to a potentially infinite set of these representations.

\begin{lstlisting}{mathescape,language=Coq}
Definition W := P Value.
\end{lstlisting}

As an example, let's consider the identity function $[[\x.x]]$. The 
semantics of this function is:

% \codeplus{../coq/simple/model.v}{idset}{} 


Consider how this definition reacts with the semantic function for application:

\begin{lstlisting}[language=Coq,mathescape]
Definition APPLY (D1 : P Value) (D2 : P Value) : P Value :=
  fun w $\Rightarrow$ exists V, (v_map V w $\in$ D1) $\wedge$ (mem V $\subseteq$ D2) $\wedge$ (valid_mem V).
\end{lstlisting}

Or, equally expressed as an inductive:

\codeplus{../coq/simple/model.v}{APPLY}{} 




\section{Part two: Extending the model to verse}

The files in the  \texttt{verse/} subdirectory contain the semantics of a much richer language.

\begin{itemize}
\item Verse contains multiple types of values: not only functions, but also integers and finite lists of values.
\item Because of the multiple types, there is the possibility
that the meaning of a term might be a \emph{run-time error}. For
example, if we try to apply the number 3 to itself.
\item Verse terms, if they don't produce an error, may also 
  produce multiple results, using choice.
\end{itemize}



\end{document}
